
service: serverless

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: us-east-1
  stage: dev
  role: arn:aws:iam::593136878399:role/backend-example
  tags: # Function specific tags
    env: test
    project: serverless

plugins:
  - serverless-offline
  - serverless-openapi-documentation

package:
  exclude:
    - .git/**
    - .gitignore
    - .DS_Store
    - npm-debug.log
    - .serverless/**
    - .serverless_plugins/**
    - .env
    - example.env
    - node_modules/**
    - jspm_packages

custom:
  serverless-offline:
    httpPort: 3030
    lambdaPort: 3130
  documentation:
    version: '1'
    title: Serverless
    description: NodeJS API with serverless framework and integrated with SWAPI
    models:
      - name: Especie
        description: Es una especie dentro del universo de Star Wars
        contentType: "application/json"
        schema: ${file(models/especie.json)}
      - name: EspecieCreada
        description: Modelo que se retorna una vez creada una especie
        contentType: "application/json"
        schema: ${file(models/especieCreada.json)}
      - name: EspecieTodas
        description: Modelo que se retorna todas las especies
        contentType: "application/json"
        schema: ${file(models/especieTodas.json)}
      - name: EspecieUna
        description: Modelo que se retorna todas las especies
        contentType: "application/json"
        schema: ${file(models/especieUna.json)}
      - name: ErrorReponse
        description: Modelo de la respuesta de error
        contentType: "application/json"
        schema:
          $schema: "http://json-schema.org/draft-04/schema#"
          properties:
            status:
              type: string
            number_records:
              type: number
            message:
              type: string
            data:
              type: object

functions:
  createSpecie:
    handler: src/app/main/handlers/createSpecie.createSpecieHandler
    events:
      - http:
          path: species
          method: POST
          cors: true
          documentation:
            summary: Creacion de especies
            description: Creacion de especies del universo de Star Wars
            requestBody:
              description: Informacion de una especie
            requestModels:
              application/json: Especie
            methodResponses:
              - statusCode: '201'
                responseModels:
                  "application/json": EspecieCreada
              - statusCode: '500'
                responseModels:
                  "application/json": ErrorReponse
  getAllSpecie:
    handler: src/app/main/handlers/getAllSpecie.getAllSpecieHandler
    events:
      - http:
          path: species
          method: GET
          cors: true
          documentation:
            summary: Obtener todas las especies
            description: Obtener todas las especies del universo de Star Wars
            methodResponses:
              - statusCode: '201'
                responseModels:
                  "application/json": EspecieTodas
              - statusCode: '500'
                responseModels:
                  "application/json": ErrorReponse
  getSpecieByName:
    handler: src/app/main/handlers/getBySpecieName.getBySpecieNameHandler
    events:
      - http:
          path: species/{nombre}
          method: GET
          cors: true
          documentation:
            summary: Obtener una especie
            description: Obtener una especie del universo de Star Wars
            pathParams:
            - name: "nombre"
              description: "Nombre de la especie"
              schema:
                type: "string"
            queryParams:
            - name: "external"
              description: "Parametro para la obtencion de una especie de manera interna(base de datos local - false) o externa(SWAPI - true)"
              schema:
                type: "string"
                enum:
                    - true
                    - false
            methodResponses:
              - statusCode: '201'
                responseModels:
                  "application/json": Especie
              - statusCode: '500'
                responseModels:
                  "application/json": ErrorReponse
